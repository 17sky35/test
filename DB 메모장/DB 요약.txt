---이력서에 CRUD 할수있다 조회 추가  수정 삭제--

-------------면접 -----------------------------------------------------
에 대해 아는대로 쓰시오
데이터베이스의 제약 조건에 대해 전반적인 명세를 기술한 것

개념 - 전체적인 뷰
내부 - 데이터를 어디에 저장을 할것인가
외부 - 사용자 입장에서 어떻게 사용할 것인가
--------------------------------------------------------------------------
SELECT SYSDATE FROM DUAL; 현재 날짜를 호출

DML - SELECT, INSERT, DELETE, UPDATE
DDL - 
CREATE : 데이터베이스 객체의 생성
ALTER : 데이터베이스 객체의 수정
DROP : 데이터베이스 객체의 영구 삭제
TRUNCATE : 테이블 내의 데이터만 몽땅 삭제

개념적 데이터 모델링
논리적 데이터 모델링
물리적 데이터 모델링

sqlplus -> 처음에 db에 접속하려고 할 때 사용하는 키워드
그 이후 에는 conn 계정/비밀번호;

SCOTT의 비밀번호를 tiger로 바꾸기
alter user scott identified by tiger;

유저를 만들기
CREATE USER 유저명 identified by 비밀번호;

-----권한주기-------------
GRANT 권한 TO 대상계정;

권한
서버접속관련
CREATE USER 데이터베이스 유저생성 권환
CREATE SESSION 서버에 접속할 수 있도록 세션을 생성할 수 있는 권한
ALTER SESSION  서버에 접속한 상태에서 세션 옵션 변경 가능 권한
RESTRICTED SESSION 제한된 상태로 공개된 데이터베이스에 접속 가능

테이블 관련
CREATE TALBE 자신의 계정에 테이블 생성 가능
CREATE ANY TABLE 다른 사용자 계정에도 테이블 생성 가능

테이블스페이스관련
CREATE TABLESPACE
ALTER TABLESPACE
DROP TABLESPACE
UNLIMITED TABLESPACE

GRANT REXOURCE,CONNECT,DBA TO 대상;

DB에서 유저를 생성후 기본적으로 아래 세가지 권한을 주면 사용자 계정처럼 사용할 수 있다.
RESOURCE	 개체 생성,변경, 제거 권환
CONNECT	 DB 연결 0권한
DBA 		DB관리자 권한
--------------------------

개념
논리
물리적




DDL
1. CREATE : 테이블이나, 인덱스, 뷰 등 데이터베이스 객체를 생성한다.
2. DROP : 생성된 데이터베이스 객체를 영구 삭제
3. ALTER : 이미 생성된 데이터베이스 객체를 수정
4. TRUNCATE : 테이블의 데이터를 통째로 삭제



DML(DataManipulationLanguage) : 데이터 제어어

SELECT*FROM 테이블; -> 테이블에서 전체 컬럼에 대한 데이터 조회

SELECT 컬럼명1,컬럼명2 FROM 테이블; -> 테이블에서 컬럼1, 컬럼2 에 대한 전체 데이터 조회

WHERE 조건식;
- 원하는 자료를 검색하기 위한 조건절

컬럼명 비교연산자 값(문자,숫자,표현식)

조건식
컬럼명 IS NULL -> 해당 컬럼에 NULL값이 들어가 있는 행을 조회
컬럼명 IS NOT NULL -> 해당 컬럼에 NULL값이 안들어가 있는 행을 조회

AND -> 조건 AND 조건
앞 뒤의 조건을 모두 만족하는 데이터를 조회
OR -> 조건 OR 조건
앞 또는 뒤 조건 중 하나라도 만족하는 데이터를 조회

SQL 연산자
BETWEEN -> 어떤 범위에 대해서 조회 WHERE 컬럼명 BETWEEN A AND B
IN -> 특정 값에 대해 조회 WHERE 컬럼명 IN(값,값,값....)
LIKE -> 특정 문자열을 포함하고 있는 데이터 조회
WHERE 컬럼명 LIKE '형식 % , _ '
WHERE 컬럼명 NOT LIKE '형식 % , _ '



PRIMARY KEY

FOREIGN KEY
CONSTRAINT FAMILY_FK FOREIGN KEY(S_NUMBER) REFERENCES STAFF(S_NUMBER)


-- 행 단위 데이터 삭제
DELETE FROM PLAYER
WHERE HEIGHT > (SELECT AVG(HEIGHT) FROM PLAYER);

--테이블 삭제
DROP TABLE "ORDER";

--컬럼명 변경 
ALTER TABLE EX2_10 RENAME COLUMN col1 TO col11;

--컬럼타입 변경
ALTER TABLE ex2_10 MODIFY col2 NUMBER(5);

--컬럼삭제
-- alter table 테이블명 drop column 컬럼명;
ALTER TABLE EX2_10 DROP COLUMN Create_date;

--컬럼추가
--alter table 테이블명 add 컬럼명 컬럼타입;
ALTER TABLE ex2_10 ADD col3 NUMBER;

--제약조건 추가
--테이블이 생성된 후 제약조건을 추가 or 삭제
--alter table 테이블명 add constraint 제약조건명 제약조건종류(컬럼명);
ALTER TABLE EX2_10 ADD CONSTRAINT pk_ex2_10 PRIMARY key(col11);

--제약조건 삭제
--alter table 테이블명 drop constraint 제약조건명;
ALTER TABLE EX2_10 DROP CONSTRAINT pk_ex2_10;

--제약조건 추가하기
ALTER TABLE TBL_ANIMAL ADD CONSTRAINT ANIMAL_PK PRIMARY key(id);



DML(Data Manipulation Language) : 데이터 조작어

1. SELECT : 데이터의 조회

SELECT 컬럼명1,컬럼명2,컬럼명3,... FROM 테이블명;

SELECT 컬럼명1,컬럼명2,컬럼명3,... FROM 테이블명
WHERE 조건식;

-------------------------------------------------
SQL 연산자
1. BETWEEN : A와 B사이의 값을 조회할 때 사용
컬럼명 BETWEEN A AND B;
2. IN : OR을 대신해 사용하는 연산자
WHERE 컬럼명 IN (2200,3200,5000,6000); 
3. LIKE : 유사검색
% : 모든값
LIKE 'M%' : M으로 시작하는 모든 데이터
LIKE '%M' : M으로 끝나는 모든 데이터
LIKE '%M%' : M을 포함하는 모든데이터
_ : 하나의 값
LIKE 'A_' : A로 시작하는 두글자 짜리 데이터
LIKE '_A_' : A를 두번째 글자로 갖는 세글자 짜리 데이터
LIKE '__A' : A로 끝나는 세글자 짜리 데이터

언더바 자체를 조회하고싶으면 이스케이프문자 '%\_%'를 써야 한다.
-------------------------------------------------

2. INSERT : 데이터의 추가

테이블에 데이터 추가하기

INSERT

INSERT INTO 테이블명(컬럼명1,컬럼명2,.....)VALUES(값1,값2,.....);
DEFAULT값을 넣고싶을 때

INSERT INTO 테이블명 VALUES(값1,값2,.....);
무조건 컬럼의 개수만큼값을 대입해야한다.

다른 테이블의 데이터를 조회해서 추가하기
INSERT INTO 테이블명(컬럼명1,컬럼명2...)
SELECT 컬럼1,컬럼2...
FROM 테이블
WHERE 조건;

각각의 테이블에 데이터를 추가하기
INSERT ALL 
	INTO 테비을A(컴럼1,컬럼2..)VALUES(값1,값2..)
	INTO 테비을B(컴럼3,컬럼4..)VALUES(값3,값4..);
SELECT * FROM DUAL;
DUAL - 가상테이블
SELECT SYSDATE FROM DUAL; 현재 시간 표시


3. UPFATE : 데이터의 수정

수정하기 
UPDATE 
- 테이블의 데이터를 수정할 때 사용하는 키워드
UPDATE 테이블명 SET 
컴럼명 = 새로운값,
컴럼명 = 새로운값,
컴럼명 = 새로운값
WHERE 조건식;
※조건식 달지 않으면 테이블 전체에서 데이터가 수정된다.

4. DELETE : 데이터의 삭제

DELETE 
조건에 맞는 데이터를 테이블에서 삭제
- 행 단위로 지움

DELETE FROM 테이블명
WHERE 조건식 
------------------------------------------------------------------------------------------------------------------------------------------------------
ORDER BY(정렬)
- 질의결과에 반환되는 행들을 특정 기준으로 정렬하고자 할 때 사용
- ORDER BY 절은 SELECT절의 가장 마지막에 기술
- ASC : 오름차순(DEFAULT이기 때문에 생략 가능)
- DESC : 내림차순(생략불가능)


사용방법

FROM 테이블명 ORERBY 컬럼명 정렬방향;

FROM 테이블명 WHERE 조건식 OREDR BY 컬럼명 정렬방향;

FROM 테이블명 WHERE 조건식 OREDR BY 컬럼명 정렬방향, 컬럼명 정렬방향;
------------------------------------------------------------------------------------------------------------------------------------------------------
ASCII()
지정된 문자의 ASCII값을 반환한다.
SELECT ASCII('A') FROM DUAL;

CHR()
지정된 숫자의 ASCII문자를 반환한다.
SELECT CHR(65) FROM DUAL;

RPAD(데이터, 고정길이, 문자)
데이터를 왼쪽으로 몰아서 정렬 후 생긴 빈 공백에 특정 문자를 채워 반환
SELECT RPAD(DEPARTMENT_NAME,10,'*') FROM DEPARTMENTS;

LPAD(데이터, 고정길이, 문자)
데이터를 오른쪽으로 몰아서 정렬 후 생긴 빈 공백에 특정 문자를 채워 반환
SELECT LPAD(DEPARTMENT_NAME,10,'*') FROM DEPARTMENTS;

TRIM()
문자열의 공백문자들을 삭제한다.
SELECT TRIM('    TRIM       ') FROM DUAL;

RTRIM()
문자열의 오른쪽 공백 제거
SELECT RTRIM('    TRIM       ') FROM DUAL;

LTRIM()
문자열의 왼쪽 공백 제거
SELECT LTRIM('    TRIM       ') FROM DUAL;

INSTR()
특정문자의 위치를 반환
SELECT INSTR('HELLOW','O') FROM DUAL;
INSTR(데이터,찾을문자,검색시작위치,몇번째 나오는지)
SELECT INSTR('HELLOW','L',1,2) FROM DUAL;

INITCAP()
첫 문자를 대문자로 변환하는 함수 (띄어쓰기 / , 뒤에오는것도 다 대문자)
SELECT INITCAP('good morning/hi,hellow') FROM DUAL;

LENGTH()
주어진 문자열의 길이를 반환
SELECT LENGTH('JHON') FROM DUAL;

CONCAT()
주어진 두 문자열을 연결
SELECT CONCAT('HELLOW ', 'WORLD') FROM DUAL;

SUBSTR()
문자열의 시작 위치부터 길이만큼 자른 후 반환
길이는 생략 가능하면, 생략 시 문자열의 끝까지 반환한다.
SELECT SUBSTR('HELLO ORACLE', 2), SUBSTR('HELLO ORACLE',7,5) FROM DUAL;

REPLCAE(데이터, 원래글자, 바꿀글자)
SELECT REPLACE ('GOOD MORNING','MORNING','EVENING') FROM DUAL;

UPPER()
주어진 문자열을 전부 대문자로 바꾼다.
SELECT UPPER('good morning') FROM DUAL;

LOWER()
주어진 문자열을 전부 소문자로 바꾼다.
SELECT LOWER('GOOD MORNING') FROM DUAL; 

-------------------------------------------------------------------------------------
숫자함수

ABS() 절대값을 반환한다 
SELECT -10, ABS(-10) FROM DUAL; 반환값 10 

ROUND() 반올림
SELECT ROUND(1234.567,1), ROUND(1234.567,-1) ,ROUND(1234.567) FROM DUAL;
반환값	 1234.6 	1230	1235

FLOOR() 주어진 숫자보다 작거나 같은 정수중 최대값을 반환한다.
SELECT FLOOR (2), FLOOR(2.1) FROM DUAL;
반환값 	2		2

TRUNC() 버림
SELECT TRUNC(1234.567,1), TRUNC(1234.567,-1) ,TRUNC(1234.567) FROM DUAL;
반환값	1234.5	1230	1234

CEIL() 올림
SELECT CEIL(2), CEIL(2.1) FROM DUAL;
반환값	2	3

MOD() 나누기 후 나머지를 반환
SELECT MOD(1,4),MOD(2,3), MOD(3,3), MOD(4,3), MOD(0,3) FROM DUAL;
반환값	1	2	0	1	0

POWER() 주어진 숫자의 지정된 수만큼 제곱한다.
SELECT POWER(2,1), POWER(2,2), POWER(2,3), POWER(2,0) FROM DUAL;
반환값	2	4	8	1

----------------------------------------------------------------------------------------
날짜 함수

ADD_MONTHS() 특정날짜에 개월수를 더한 날을 반환한다.
SELECT SYSDATE, ADD_MONTHS(SYSDATE, 2) FROM DUAL; 
반환값	 현재날짜+2달뒤; EX) 8.27, 10.27

MONTHS_BETWEEN() 두 날짜 사이의 개월수를 반환
SELECT SYSDATE, HIRE_DATE,  MONTHS_BETWEEN(SYSDATE, HIRE_DATE)
FROM EMPLOYEES;
반환값	현재날짜 - 입사일

NEXT_DAY() 주어진 날짜 다음에 나타나는 지정일(1:일요일 ~ 7:토요일)
SELECT SYSDATE, NEXT_DAY(SYSDATE,1) FROM DUAL;
SELECT SYSDATE, NEXT_DAY(SYSDATE,'일요일') FROM DUAL;
SELECT SYSDATE, NEXT_DAY(SYSDATE,'일') FROM DUAL;
반환값 현재날짜에서 가장가까이다가오는 일요일

SELECT SYSDATE, NEXT_DAY(SYSDATE-7,1) FROM DUAL;
반환값 저번주 일요일
----------------------------------------------------------------------------------------
형변환 함수

TO_CHAR() 날짜를 형식에 맞춰 문자열로 변환
SELECT TO_CHAR(SYSDATE,'YYYY-MM-DD'),
TO_CHAR(SYSDATE,'YYYY-MM-DD DAY'),
TO_CHAR(SYSDATE,'YYYY-MM-DD HH:MI:SS'),
SYSDATE 
FROM DUAL;
반환값 	2024-08-27
	2024-08-27 화요일
	2024-08-27 11:13:52
	2024-08-27 11:13:52:52000

날짜 포맷형식
SCC, CC : 세기
YYYY, YY : 년도
mm : 월
DD : 일
DAY : 요일
MON : 월명(JAN)
MONTH : 월명(JANUARY)
HH, HH24 : 시간
MI : 분
SS : 초

숫자 포맷
0 : 숫자, 공백시 0으로 채움
9 : 숫자
, : 쉼표 표시
L : 지역 통화문자 ( \ ) 
SELECT TO_CHAR(1234567,'9,999,999') FROM DUAL;
반환값 	1,234,567

SELECT TO_CHAR(1234567,'L9,999,999') FROM DUAL;
반환값 	\1,234,567

SELECT TO_CHAR(12,'0999') FROM DUAL;
반환값	  0012

TO_DATE
SELECT TO_DATE('2024.08.27') FROM DUAL; 
SELECT TO_DATE('08.27.2024','MM,DD,YYYY') FROM DUAL;
문자를 날짜로 변환

SELECT TO_DATE('2024.08','YYYY,MM') FROM DUAL;
일 입력하지않으면 1일로 자동으로 나온다

SELECT TO_DATE('11','DD') FROM DUAL; 
해당 년도 해당 월로 자동으로 나온다
----------------------------------------------------------------------------
NULL 처리함수
NULL 값을 다른값으로 변경

NVL()

NVL(컬럼,0)
NULL인 컬럼은 0으로 출력된다.

NVL2()	NULL 일 때 치환할 값, NULL이 아닐 때 치환할 값

NVL2(컬럼,1,0)
NULL이 아닐 때 1, NULL 일 때 

--------------------------------------------------------------------------------
순위 함수

RANK() OVER() 그룹 내 순위를 계산하여 NUMBER 타입으로 순위를 반환
RANK() OVER(기준)
SELECT RANK () OVER(ORDER BY SALARY DESC), FIRST_NAME ,SALARY 
FROM EMPLOYEES;
- 금액 내림차순 순위

DENSE_RANK() 중복된 기준은 순위가 똑같이 나온다
SELECT DENSE_RANK() OVER(ORDER BY SALARY DESC), FIRST_NAME ,SALARY 
FROM EMPLOYEES;
- 금액 내림차순 순위

--------------------------------------------------------------------------------
집계 함수
여러 행들에 대한 연산 결과를 하나의 행으로 반환
집계함수는 NULL을 체크하지 않는다.
평균을 구할 때 내가 원하는 값과는 다른 결과 나올수 있다.

COUNT() 행의 개수를 세서 반화
SELECT COUNT(*) FROM EMPLOYEES;
총 행의 개수 반환

MIN() 	최소값 구하기
SELECT MIN(SALARY) FROM EMPLOYEES;
급여중 최소값 반환

MAX() 	최대값 구하기
SELECT MAX(SALARY) FROM EMPLOYEES;
급여중 최대값 반환

AVG()	평균값 구하기
SELECT AVG(SALARY) FROM EMPLOYEES;
급여 평균 반환

SUM()	총합 구하기
SELECT SUM(SALARY) FROM EMPLOYEES;
급여 총합 반환
------------------------------------------------------------------------------------
GROUP BY(그룹화)
특정 테이블에서 소그룹을 만들어 결과를 분산시켜 얻고자 할 때
GROUP BY : ~별(예 : 부서별 인원수)
SELECT DEPARTMENT_ID ,AVG(SALARY), SUM(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;
부서별 	급여 평균		급여 합

그룹함수

ROLLUP()		소그룹의 합계를 계산하는 함수
SELECT 상품ID, 월 , SUM(매출액)
FROM 월별매출
GROUP BY ROLLUP(상품ID,월);
상품ID 월 	 합 /	 총합

CUBE()	항목들 간의 다차원적인 소계
GROUP BY 절에 명시한 모든 컬럼에 대해 소그룹 합계를 계산해준다.
SELECT 상품ID, 월, SUM(매출액)
FROM 월별매출
GROUP BY CUBE(상품ID, 월);

GROUPING SETS() 특정 항목에 대한 소계를 내는 함수
SELECT 상품ID, 월, SUM(매출액)
FROM 월별매출
GROUP BY GROUPING SETS(상품ID, 월);
상품ID 별 합계	월 별 합계
--------------------------------------------------------------------------------------
Having절
집계함수에 조건을 줘야 할 때 HAVING에 해야한다.

SELECT DEPARTMENT_ID ,TRUNC(AVG(SALARY),1)
FROM EMPLOYEES 
WHERE DEPARTMENT_ID <=50
GROUP BY DEPARTMENT_ID 
HAVING AVG(SALARY) <10000;
--------------------------------------------------------------------------------------
VIEW 의 생성
CREATE VIEW 뷰이름 AS(
	쿼리문
)


VIEW 의 수정
OR REPLACE : 기존의 정의를 변경하는데 사용할 수 있다.
CREATE OR REPLACE VIEW AS(
	쿼리문
);

VIEW 의 삭제
RESTRICT : VIEW 를 다른곳에서 참조하고 있다면 삭제가 취소됨
DROP VIEW 뷰이름 RESTRICT ;
CASCADE : VIEW 를 참조하는 다른 뷰나 제약조건까지 모두 삭제.
DROP VIEW 뷰이름 CASCADE ;








DISTINCT		중복제거
COUNT ( DISTINCT 컬럼명)
