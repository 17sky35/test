1. 자료형
자료형     키워드        크기        표현범위
논리형    boolean       1bit        true,false
문자형    char           2byte       0
정수형    byte           1byte	      -128 ~ 17
	short	    2byte       -32,768 ~ 32,767	
	int	    4byte       -21억 ~ 21억
	long	    8byte	      -900경 ~ 900경
실수형   	float	    4byte       0.0
	double       8byte       0.0



연산자(Operator)
최고연산자	.   ,   ()
증감연산자	++,--
산술연산자	+,-,*,/,%
시프트연산자	>>,<<
비교연산자	>,<,>=,<=,==,!=
논리연산자	&&,||,!
비트연산자	&,|,~,^
대입연산자	=,+=,-=,*=,/=,%=
삼항연산자	조건식 ? A : B


문자열 비교(equals)
myNum.equals(lottoNumber)


Arrays 클래스
Arrays.toString(arr) 배열출력
Arrays.sort(arr)  정렬
Arrays.sort(arr2,Comparator.reverseOrder()); 내림차순 정렬

int[] arr = {1,2,3}
여기서 arr은 주소값만 저장

--------------------------------------------------------------------

	   얕은복사
int[] arr01 = { 1, 2, 3 };
int[] arr02 = arr01;

              깊은 복사

-반복문을 이용한 깊은 복사
int[] cards = { 1, 6, 4, 5, 3, 2 };
int[] newCards = new int[cards.length];
for (int i = 0; i < cards.length; i++) {
       newCards[i] = cards[i];
}

-Arrays클래스를 이용한 깊은 복사
int[] newCards2 = Arrays.copyOf(cards, cards.length);

-System클래스를 이용한 깊은 복사
int [] newCards3 = new int[cards.length];
		
System.arraycopy(cards,0,newCards3,0,cards.length);


--------------------------------------------------------------------


랜덤 클래스
Random rnd = new Random();
numbers[i] = rnd.nextInt(30) + 1;

int n = 100;
int - 자료형
n - 변수명
100 - 값

---------------------------------------------------
클래스명 변수명 = new 클래스명();	          ㅣ
- new : 메모리에 객체를 올리기위한 공간할당.  ㅣ
- 클래스명(); : 생성자의 호출		          ㅣ
---------------------------------------------------

클래스 - 실행용 - main()메서드 , 다른 곳에서 사용 안됨X
         - 참조용(설계도) - 객체 생성용,상태와 기능의 정의 다른곳에서 사용 가능O
	(여러개 가능)

클래스 구성요소 - 변수(필드,멤버)
	         - 메서드
----------------------------------------------------------
접근제한자  반환형  메서드명(매개변수){	ㅣ
					ㅣ
}					ㅣ
----------------------------------------------------------
접근제한자
- 클래스/메서드/필드/에 대한 접근을 어느범위까지 제한하느냐에 대한 키워드
1. public : 모든 접근을 허용. 같은 프로젝트 내의 모든 객체들이 사용할 수 있도록 허용
2. private : 현재 클래스 내에서만 사용을 허가
3. protected : 상속관계의 객체들에서만 사용을 허가
4. default : 같은 패키지내의 객체에서만 사용을 허가(아무것도 쓰지 않으면 자동으로 default)

반환형
반환값의 자료형을 따라감.
