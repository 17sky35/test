1. 자료형
자료형     키워드        크기        표현범위
논리형    boolean       1bit        true,false
문자형    char           2byte       0
정수형    byte           1byte	      -128 ~ 17
	short	    2byte       -32,768 ~ 32,767	
	int	    4byte       -21억 ~ 21억
	long	    8byte	      -900경 ~ 900경
실수형   	float	    4byte       0.0
	double       8byte       0.0



연산자(Operator)
최고연산자	.   ,   ()
증감연산자	++,--
산술연산자	+,-,*,/,%
시프트연산자	>>,<<
비교연산자	>,<,>=,<=,==,!=
논리연산자	&&,||,!
비트연산자	&,|,~,^
대입연산자	=,+=,-=,*=,/=,%=
삼항연산자	조건식 ? A : B


문자열 비교(equals)
myNum.equals(lottoNumber)

@Override 어노테이션
- 자바에서 @를 어노테이션이라고 부른다.

Arrays 클래스
Arrays.toString(arr) 배열출력
Arrays.sort(arr)  정렬
Arrays.sort(arr2,Comparator.reverseOrder()); 내림차순 정렬

int[] arr = {1,2,3}
여기서 arr은 주소값만 저장

--------------------------------------------------------------------

	   얕은복사
int[] arr01 = { 1, 2, 3 };
int[] arr02 = arr01;

              깊은 복사

-반복문을 이용한 깊은 복사
int[] cards = { 1, 6, 4, 5, 3, 2 };
int[] newCards = new int[cards.length];
for (int i = 0; i < cards.length; i++) {
       newCards[i] = cards[i];
}

-Arrays클래스를 이용한 깊은 복사
int[] newCards2 = Arrays.copyOf(cards, cards.length);

-System클래스를 이용한 깊은 복사
int [] newCards3 = new int[cards.length];
		
System.arraycopy(cards,0,newCards3,0,cards.length);


--------------------------------------------------------------------


랜덤 클래스
Random rnd = new Random();
numbers[i] = rnd.nextInt(30) + 1;

int n = 100;
int - 자료형
n - 변수명
100 - 값

---------------------------------------------------
클래스명 변수명 = new 클래스명();	          ㅣ
- new : 메모리에 객체를 올리기위한 공간할당.  ㅣ
- 클래스명(); : 생성자의 호출		          ㅣ
---------------------------------------------------

클래스 - 실행용 - main()메서드 , 다른 곳에서 사용 안됨X
         - 참조용(설계도) - 객체 생성용,상태와 기능의 정의 다른곳에서 사용 가능O
	(여러개 가능)

클래스 구성요소 - 변수(필드,멤버)
	         - 메서드
-----------------------------------------------------
접근제한자  반환형  메서드명(매개변수){	ㅣ
					ㅣ
}					ㅣ
-----------------------------------------------------
접근제한자
- 클래스/메서드/필드/에 대한 접근을 어느범위까지 제한하느냐에 대한 키워드
1. public : 모든 접근을 허용. 같은 프로젝트 내의 모든 객체들이 사용할 수 있도록 허용
2. private : 현재 클래스 내에서만 사용을 허가
3. protected : 상속관계의 객체들에서만 사용을 허가
4. default : 같은 패키지내의 객체에서만 사용을 허가(아무것도 쓰지 않으면 자동으로 default)

반환형
반환값의 자료형을 따라감.


----------생성자명은 무조건 클래스명--------------
접근제한자 클래스명(매개변수1,매개변수2...){	ㅣ
					ㅣ
}					ㅣ
-----------------------------------------------------



-----------오버로딩 규칙---------중요------------
1. 생성자나 메서드의 이름은 그대로 사용해야 한다.
2. 매개변수의 개수가 달라야 한다.
3. 매개변수의 개수 같아도 자료형이 달라야 한다.

public Phone(String b, int s) {
	brand = b;
	series = s;
}

public Phone (String b , int s, String c) {
	brand = b;
	series = s;
	color = c;
}
---------------------------------------------------


오버라이딩(Overriding)(상속에서만 사용)
- 부모클래스에서 상속 받은 자식 클래스는 부모 클래스의 필드와 메서드를 가져와서 그대로 사용할 수 있다.
- 하지만 필요하다면, 자식 클래스가 상속받은 메서드의 내용을 변경해서 사용할 수 있다.
- 우리는 이렇게 상속받은 메서드를 변경해서 다시 구현하는 것을 오버라이딩(Overriding)이라고 한다.

----------------------오버라이딩 규칙-------------------------------------------------------
1. 부모클래스의 메서드명, 반환형, 매개변수까지 동일해야 한다.			ㅣ
2. 부모클래스의 메서드보다 접근 제한 범위를 줄일수는 있으나 넓일수는 없다.		ㅣ
----------------------------------------------------------------------------------------------















