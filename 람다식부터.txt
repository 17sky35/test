람다식

int add(int x, int y){
	return x+y;
}
위 함수를 람다식으로 표현하기
(int x, int y)->{return x+y;}

- 메서드의 이름과 반환형을 제거하고 화살표를 이용해 구현한다.

소괄호 생략하기
- 람다식 문법에서는 파라미터의 자료형을 생략할 수 있다.
(x, y)->{return x+y;}
- 파라미터가 한 개인 경우 소괄호도 생략할 수 있다.
str -> {System.out.println(str);}

중괄호 생략하기
- 함수의 반환형이 void라면 중괄호도 생략할 수 있다.
str -> System.out.println(str);
System.out::println

- 반환형이 있을 때 return키워드와 중괄호를 같이 생략할 수 있다.
(x, y)->x+y;

-------------------------------------------------------------------------
java.util.function 패키지의 주요 인터페이스			ㅣ
인터페이스명 	추상메서드				ㅣ
java.lang.Runnable	void run()	매개변수없고 반환값도 없음	ㅣ	
Supplier 		T get()		매개변수없고 반환값만 있음	ㅣ
Consumer	void accpt(T t)	매개변수 한개, 반환값없음	ㅣ
Function<T,R>	R apply(T t)	매개변수 한개, 반환값있음	ㅣ
Predicate		boolean test(T t)	조건을 표현하는데 사용됨	ㅣ
Consumer<String> print = t -> System.out.print(t + " ");		ㅣ
Consumer 인터페이스에서 기본으로 제공 인터페이스 생성안해두됨.	ㅣ
							l
매개변수가 두 개인 함수형 인터페이스				l
BiConsumer<T,U>  void accpt<T t,U u>			l
BiPredicate<T,U>	boolean test(T t, U u>			l
BiFunction<T,U,R>	R apply<T t, U u>				l
							l
람다식의 합성과 결합					l
두 람다식을 합성해서 새로운 람다식을 만들 수 있다.		l
f.andThen(g) -> f를 먼저 적용하고 그다음에 g를 적용한다		l	
f.compose(g) -> g를 먼저 적용하고 f를 적용한다.		l
-------------------------------------------------------------------------

스레드 동기화 처리
하나의 스레드가 이 영역에 진입할때 락을 걸어 다른 스레드가 수행되지 못하도록 하고 작업이 종료되면 락을 풀어 다른 스레드가 작업하도록 하는 것.
블록 또는 메서드 단위로 synchronized키워드를 붙여 사용한다.

메서드 동기화 처리
메서드 이름 앞에 synchronized키워드를 사용하면 해다 메서드 전체를 동기화 처리할 수 있다.

public synchronized void add(){

}
블록 동기화 처리   ->   synchronized(객체명);
메서드 동기화 처리 경우 메서드 처리 시간이 길어질 경우 성능에 영향을 미치는 단점이 있다.
이러한 이유로 전체 메서드가 아닌 특정 영역만 동기화 처리를 하는것을 블록 동기화 처리라고 한다.

스레드의 상태
스레드는 생성하고, 실행, 종료되기까지 다양한 상태를 가진다.
각 스레드의 상태는 스레드 클래스에 정의되어 있으며, Thread.State 타입으로 알 수 있다.
스레드는 상태에 따라 6가지 타입으로 분류한다.
생성	NEW		스레드 객체가 생성되었지만 start()로 호출되지 않은 상태
대기	RUNNABLE	실행 대기 또는 실행 상태로 언제든지 갈 수 있는 상태
일시정지	WATING		다른 스레드가 종료될 때까지 대기하는 상태
	TIME_WATING	주어진 시간동안 대기하는 상태
	BLOCKED		락이 풀릴때까지 대기하는 상태
종료	TERMINATED	수행을 종료한 상태

Thread.sleep(1000);//1초동안 멈춤
sleep(int mils)
주어진 시간동안 스레드를 정지시키는 메서드
해당 기능은 모든 스레드를 대기시키며, 주어진 시간이 지나면 풀리게 된다.

--------------------------------------------------------------------------------------------------------------------

FileWriter fw = new FileWriter("D:\\web0900_jyh\\1.java/fileWriter예제.txt",true);
true 붙이면 이어쓰기 없으면 덮어쓰기

File 클래스

InputStream의 주요 메서드

int read()		문자를 1byte씩 읽고 반환, 더이상 읽을 문자가 없으면 -1을 반환
int read(byte[] b)	매개변수로 전달된 배열에, 읽어온 문자를 저장하고 실제 읽어온 수만큼 반환, 더이상 읽을 문자가 없으면 -1을 반환
int read(byte[] b, int offset, int len)	매개변수로 전달된 배열에 정해진 범위만큼 읽어서 저장(offset 시작 위치, len 길이)
int available()	스트림으로부터 읽어올 수 있는 데이터의 크기를 반환
close()		스트림 사용을 종료하고 자원을 반환

FileInputStream
- 파일을 바이트 단위로 읽어들일 때 사용하는 스트림
- 이미지, 동영상, 텍스트등 모든 타입의 파일을 읽어올 수 있다.

OutputStream
- 바이트 기반의 출력 스트림은 최상위 클랙스로 OutputStream객체가 제공된다.
- 해당 객체를 상속해 다양한 출력 스트림들이 존재한다.

OutputStream의 주요 메서드

int write(int b)	1byte 출력
int write(byte[] b)	매개변수로 주어진 배열의 모든 바이트 출력
int write(byte[] b, int offset, int len)	매개변수로 주어진 배열에 정해진 범위만큼 읽어서 출력(offset 시작 위치, len 길이)
int flush()		출력 버퍼에 잔류하는 모든 내용 출력
close()		스트림 사용을 종료하고 자원은 반환

FileOutputStream
- 파일을 쓸 때 기존 파일명이 존재하는 경우가 있다
- 이 때 해당 파일의 내용을 유지한 채 이어 쓰거나 기존의 내용을 무시하고 새롭게 파일을 생성할 수 있다.

문자 기반 스트림
- 자바에서 기본 자료형은 char형을 통해 문자를 저장할 수 있다.
- 1byte 단위로 처리하는 바이트 기반 스트림은 모든 형식을 다룰 수 있으나 문자를 처리하는 
char형의 크기는 별도로 처리하지 않으면 정상적으로 읽지 못하는 경우가 있다.
- 텍스트의 경우 문자 기반의 스트림을 이용하여 읽는 경우가 많다.

Reader
- 문자 기반 입력 스트림은 최상위 클래스인 Reader를 상속해 다양한 클래스를 제공한다.

문자기반 스트림에서 제공하는 메서드
int read() 		한개의 문자를 읽고 반환, 더 이상 읽을 문자가 없으면 -1를 반환
int read(char[] buf)		매개변수로 주어진 배열에 읽은 문자를 저장하고 읽은 수만큼 반환,
			더 이상 읽을 문자가 없으면 -1를 반환
int read(char[] buf, int offset, int len)	매개변수로 주어진 배열에 정해진만큼 읽어서 저장(offset 시작 위치, len 길이)
close()			스트림 사용을 종료하고 자원을 반환

보조스트림
- 스트림은 기능에 따라 기반 스트림과 보조 스트림으로 구분한다.
- 기반 스트림 : 대상에 직접 읽고 쓰는 스트림이다.
- 보조 스트림 : 직접 읽고 쓰는 기능없이 기반 스트림에 추가로 사용할 수 있는 스트림이다.

- 보조스트림만으로는 데이터를 주고받을 수 없다.
- 스트림의 기능을 향상시키거나 새로운 기능을 제공해주는 스트림으로 여러 보조스트림을 중첩하여 사용하는것은 가능하다.




















