-- FROM 절에서 쓸 때 : IN LINE VIEW
-- SELECT 절에서 사용할 때 : SCALAR
-- WHERE 절에서 사용할 때 : SUB QUERY

-- 사원테이블에서 성과 이름 연결

SELECT FIRST_NAME ||'  '||LAST_NAME 
FROM EMPLOYEES ;
SELECT FIRST_NAME ||LAST_NAME ||'의 급여는 '||SALARY ||'이다'
FROM EMPLOYEES ;

SELECT 
COUNT(SALARY)AS 개수,
MAX(SALARY)AS 최대값,
MIN(SALARY)AS 최소값,
SUM(SALARY)AS 총합,
AVG(SALARY)AS 평균
FROM EMPLOYEES ;

SELECT EMPLOYEE_ID AS 사번,
FIRST_NAME AS 이름,
SALARY AS 급여
FROM EMPLOYEES ;

-- 두개 이상의 테이블에서 컬럼을 조회할 때
-- 어떤 테이블에서 온 컬럼인지 확실하게 적어줘야 한다.
SELECT a.DEPARTMENT_ID , d.DEPARTMENT_ID
FROM EMPLOYEES a ,DEPARTMENTS d;

SELECT E.FIRST_NAME AS 이름 , E.DEPARTMENT_ID ,D.DEPARTMENT_NAME AS 부서명
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID =D.DEPARTMENT_ID;

SELECT D.DEPARTMENT_NAME ,L.CITY 
FROM DEPARTMENTS D JOIN LOCATIONS L
ON D.LOCATION_ID = L.LOCATION_ID ;

SELECT D.DEPARTMENT_NAME ,L.CITY 
FROM DEPARTMENTS D JOIN LOCATIONS L
ON D.LOCATION_ID = L.LOCATION_ID ;

SELECT L.CITY , C.COUNTRY_NAME 
FROM LOCATIONS L JOIN COUNTRIES C
ON L.COUNTRY_ID = C.COUNTRY_ID ;

SELECT E.LAST_NAME , E.FIRST_NAME ,E.JOB_ID ,JOB_TITLE 
FROM EMPLOYEES E JOIN JOBS J
ON E.JOB_ID  = J.JOB_ID ;

SELECT E.FIRST_NAME ,E.EMAIL ,D.DEPARTMENT_ID ,D.DEPARTMENT_NAME,L.LOCATION_ID ,L.CITY 
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID =D.DEPARTMENT_ID 
JOIN LOCATIONS L
ON D.LOCATION_ID =L.LOCATION_ID 
AND L.CITY = 'Seattle';

SELECT * FROM EMP;

SELECT E2.ENAME 직원,E2.MGR , E1.ENAME 상사,E1.EMPNO
FROM EMP E1 JOIN EMP E2
ON E1.EMPNO = E2.MGR;

CREATE TABLE 테이블A(
A_ID NUMBER,
B_NAME VARCHAR2(10)
);

CREATE TABLE 테이블B(
A_ID NUMBER,
B_NAME VARCHAR2(10)
);

INSERT ALL 
INTO 테이블A VALUES (1,'Jhon')
INTO 테이블A VALUES (2,'Jane')
INTO 테이블A VALUES (3,'Bob')
INTO 테이블B VALUES (101,'Apple')
INTO 테이블B VALUES (102,'Banan')
SELECT * FROM DUAL;

DROP TABLE 테이블A;
DROP TABLE 테이블B;

SELECT * FROM 테이블A;
SELECT * FROM 테이블B;

SELECT * FROM 테이블A CROSS JOIN 테이블B;

SELECT * FROM 테이블A LEFT OUTER JOIN 테이블B
ON 테이블A.A_ID = 테이블B.A_ID;

SELECT * FROM 테이블A RIGHT OUTER JOIN 테이블B
ON 테이블A.A_ID = 테이블B.A_ID;

SELECT * FROM 테이블A FULL OUTER JOIN 테이블B
ON 테이블A.A_ID = 테이블B.A_ID;

SELECT FIRST_NAME, DEPARTMENT_NAME
FROM EMPLOYEES E LEFT OUTER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID ;

SELECT FIRST_NAME ,DEPARTMENT_NAME 
FROM EMPLOYEES e RIGHT OUTER JOIN DEPARTMENTS d 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID ;

SELECT FIRST_NAME ,DEPARTMENT_NAME 
FROM EMPLOYEES e FULL OUTER JOIN DEPARTMENTS d 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID ;

SELECT T.TEAM_NAME ,S.STADIUM_NAME 
FROM TEAM T LEFT OUTER JOIN STADIUM S 
ON T.TEAM_ID = S.HOMETEAM_ID ;

CREATE OR REPLACE VIEW MY_EMPL AS(
SELECT EMPLOYEE_ID , FIRST_NAME ,SALARY , (SALARY * COMMISSION_PCT) COMM
FROM EMPLOYEES);

SELECT *FROM MY_EMPL;

SELECT *FROM PLAYER ;

CREATE OR REPLACE VIEW PLAYER_AGE AS(
SELECT PLAYER_NAME,ROUND((SYSDATE - BIRTH_DATE)/365) AGE
FROM PLAYER
);

SELECT * FROM PLAYER_AGE WHERE AGE >= 30;

CREATE OR REPLACE VIEW DATA_PLUS AS(
SELECT DENSE_RANK () OVER(ORDER BY SALARY DESC) 순위, FIRST_NAME , SALARY
FROM EMPLOYEES 
);

SELECT *FROM DATA_PLUS ;
SELECT *FROM PLAYER p ;

CREATE OR REPLACE VIEW PLAYER_TEAM_NAME AS(
SELECT P.*,TEAM_NAME FROM PLAYER P LEFT OUTER JOIN TEAM t
ON P.TEAM_ID =T.TEAM_ID );

SELECT *FROM PLAYER_TEAM_NAME ;

CREATE OR REPLACE VIEW STADIUM_INFO AS (
SELECT HOMETEAM_ID ,STADIUM_NAME ,TEAM_NAME 
FROM TEAM t RIGHT OUTER JOIN STADIUM s
ON  T.STADIUM_ID = S.STADIUM_ID);

SELECT *FROM STADIUM_INFO ;

SELECT *FROM STADIUM_INFO WHERE HOMETEAM_ID IS NULL; 

SELECT * FROM EMPLOYEES e 

UPDATE EMPLOYEES SET
FIRST_NAME = '정연호'
WHERE JOB_ID ='IT_PROG';

--데이터베이스에 영향을 주는 INSERT, UPDATE, DELETE문에서 많이 사용된다.






